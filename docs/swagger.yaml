basePath: /
definitions:
  models.Author:
    properties:
      birthDate:
        example: "1931-06-12"
        type: string
      books:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      countOfRentedBooks:
        example: 0
        type: integer
      id:
        example: 0
        type: integer
      name:
        example: Rodney William Whitaker
        type: string
    type: object
  models.Book:
    properties:
      author:
        $ref: '#/definitions/models.Author'
      authorID:
        example: 12
        type: integer
      id:
        example: 21
        type: integer
      title:
        example: Shibumi
        type: string
      userID:
        example: 12
        type: integer
    type: object
  models.User:
    properties:
      email:
        example: johnWick@continental.fake
        type: string
      id:
        example: 0
        type: integer
      rentedBooks:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      username:
        example: johnWick
        type: string
    type: object
  responder.Response:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: any message
        type: string
      success:
        example: true
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: API библиотеки
  title: API
  version: "1.0"
paths:
  /library/author:
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные автора
        in: body
        name: object
        required: true
        schema:
          example: '{"name": "Rodney William Whitaker","birthDate": "1931-06-12"}'
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responder.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responder.Response'
      summary: Создание автора
      tags:
      - author
  /library/author/list:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Author'
            type: array
      summary: Получение списка авторов
      tags:
      - author
  /library/author/top:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Author'
            type: array
      summary: Получение топа авторов
      tags:
      - author
  /library/book:
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные книги
        in: body
        name: object
        required: true
        schema:
          example: '{"title": "Shibumi","authorID": 1}'
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responder.Response'
      summary: Создание книги
      tags:
      - book
  /library/book/list:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Получение списка книг
      tags:
      - book
  /library/book/rent/{bookID}/{userID}:
    post:
      consumes:
      - application/json
      parameters:
      - description: ID книги
        in: path
        name: bookID
        required: true
        type: string
      - description: ID пользователя
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responder.Response'
      summary: Взятие кники
      tags:
      - book
  /library/book/return/{bookID}:
    post:
      consumes:
      - application/json
      parameters:
      - description: ID книги
        in: path
        name: bookID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responder.Response'
      summary: Возврат книги
      tags:
      - book
  /library/user:
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные пользователя
        in: body
        name: object
        required: true
        schema:
          example: '{"username": "John Wick","email": "johnWick@continental.fake"}'
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responder.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responder.Response'
      summary: Создание пользователя
      tags:
      - user
  /library/user/list:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Получение списка пользователей
      tags:
      - user
swagger: "2.0"
